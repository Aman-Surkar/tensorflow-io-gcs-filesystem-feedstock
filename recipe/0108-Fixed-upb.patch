From ba38899537e133a7efec0919e94e0eb70bf66fb9 Mon Sep 17 00:00:00 2001
From: Archana Shinde1 <archana.shinde2504@gmail.com>
Date: Wed, 20 Dec 2023 16:40:57 +0000
Subject: [PATCH] Fixed-upb

---
 WORKSPACE                   | 12 +++++++++
 third_party/upb_gcc10.patch | 54 +++++++++++++++++++++++++++++++++++++
 2 files changed, 66 insertions(+)
 create mode 100644 third_party/upb_gcc10.patch

diff --git a/WORKSPACE b/WORKSPACE
index c60b5d8f..d5641000 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -15,6 +15,18 @@ http_archive(
     ],
 )
 
+http_archive(
+    name = "upb",
+    sha256 = "61d0417abd60e65ed589c9deee7c124fe76a4106831f6ad39464e1525cef1454",
+    strip_prefix = "upb-9effcbcb27f0a665f9f345030188c0b291e32482",
+    patch_args = ["-p1"],
+    urls = [
+        "https://storage.googleapis.com/mirror.tensorflow.org/github.com/protocolbuffers/upb/archive/9effcbcb27f0a665f9f345030188c0b291e32482.tar.gz",
+        "https://github.com/protocolbuffers/upb/archive/9effcbcb27f0a665f9f345030188c0b291e32482.tar.gz",
+    ],
+    patches = ["//third_party:upb_gcc10.patch"],
+)
+
 # Note: snappy is placed earlier as tensorflow's snappy does not include snappy-c
 http_archive(
     name = "snappy",
diff --git a/third_party/upb_gcc10.patch b/third_party/upb_gcc10.patch
new file mode 100644
index 00000000..6fed76a0
--- /dev/null
+++ b/third_party/upb_gcc10.patch
@@ -0,0 +1,68 @@
+From bf999f71058f05330f8dce75d2113770e7c580ca Mon Sep 17 00:00:00 2001
+From: Deepali Chourasia <deepch23@in.ibm.com>
+Date: Wed, 27 Dec 2023 07:42:32 +0000
+Subject: [PATCH] fix
+
+---
+ BUILD     |  2 +-
+ upb/upb.c | 17 +++--------------
+ 2 files changed, 4 insertions(+), 15 deletions(-)
+
+diff --git a/BUILD b/BUILD
+index ad85b202..2311b2e4 100644
+--- a/BUILD
++++ b/BUILD
+@@ -44,7 +44,7 @@ config_setting(
+
+ config_setting(
+     name = "windows",
+-    constraint_values = ["@bazel_tools//platforms:windows"],
++    constraint_values = ["@platforms//os:windows"],
+ )
+
+ config_setting(
+diff --git a/upb/upb.c b/upb/upb.c
+index 266ea7d7..1410b2d8 100644
+--- a/upb/upb.c
++++ b/upb/upb.c
+@@ -11,17 +11,6 @@
+
+ #include "upb/port_def.inc"
+
+-/* Guarantee null-termination and provide ellipsis truncation.
+- * It may be tempting to "optimize" this by initializing these final
+- * four bytes up-front and then being careful never to overwrite them,
+- * this is safer and simpler. */
+-static void nullz(upb_status *status) {
+-  const char *ellipsis = "...";
+-  size_t len = strlen(ellipsis);
+-  UPB_ASSERT(sizeof(status->msg) > len);
+-  memcpy(status->msg + sizeof(status->msg) - len, ellipsis, len);
+-}
+-
+ /* upb_status *****************************************************************/
+
+ void upb_status_clear(upb_status *status) {
+@@ -37,8 +26,8 @@ const char *upb_status_errmsg(const upb_status *status) { return status->msg; }
+ void upb_status_seterrmsg(upb_status *status, const char *msg) {
+   if (!status) return;
+   status->ok = false;
+-  strncpy(status->msg, msg, sizeof(status->msg));
+-  nullz(status);
++  strncpy(status->msg, msg, UPB_STATUS_MAX_MESSAGE - 1);
++  status->msg[UPB_STATUS_MAX_MESSAGE - 1] = '\0';
+ }
+
+ void upb_status_seterrf(upb_status *status, const char *fmt, ...) {
+@@ -52,7 +41,7 @@ void upb_status_vseterrf(upb_status *status, const char *fmt, va_list args) {
+   if (!status) return;
+   status->ok = false;
+   _upb_vsnprintf(status->msg, sizeof(status->msg), fmt, args);
+-  nullz(status);
++  status->msg[UPB_STATUS_MAX_MESSAGE - 1] = '\0';
+ }
+
+ /* upb_alloc ******************************************************************/
+--
+2.40.1
+
--
2.40.1


